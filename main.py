# archivo: main.py

from generador_datos import generar_datos_prueba
from analisis import analizar_ordenamiento, analizar_busqueda
from algoritmos.ordenamiento import quick_sort
# üí° Importamos las funciones de b√∫squeda
from algoritmos.busqueda import busqueda_binaria, busqueda_lineal_por_nombre
import copy

def mostrar_menu():
    """
    Imprime el men√∫ principal de opciones en la consola.
    """
    print("\n--- üõí Men√∫ Principal - Gesti√≥n de Tienda ---")
    print("1. Analizar rendimiento de algoritmos de Ordenamiento")
    print("2. Analizar rendimiento de algoritmos de B√∫squeda (Pruebas autom√°ticas)")
    print("3. Ver todos los productos del cat√°logo (con opciones de orden)")
    print("4. Buscar un producto") # ‚úÖ Nueva opci√≥n
    print("0. Salir")
    print("-----------------------------------------------")

def ejecutar_simulacion_interactiva():
    """
    Punto de entrada que ejecuta un men√∫ interactivo para la simulaci√≥n de la tienda.
    """
    print("Cargando y generando cat√°logo de productos...")
    catalogo_productos = generar_datos_prueba(50)
    # Creamos una copia ordenada por ID para la b√∫squeda binaria
    catalogo_ordenado_id = quick_sort(copy.deepcopy(catalogo_productos), key=lambda p: p.id)
    print(f"¬°Cat√°logo con {len(catalogo_productos)} productos listo!\n")

    while True:
        mostrar_menu()
        opcion = input("Seleccione una opci√≥n: ")

        if opcion == '1':
            analizar_ordenamiento(catalogo_productos)
        
        elif opcion == '2':
            analizar_busqueda(catalogo_productos)

        elif opcion == '3':
            # ... (El c√≥digo para mostrar productos ordenados se queda igual) ...
            print("\n¬øC√≥mo desea ordenar la lista de productos?")
            print("  1. Por calificaci√≥n (de mayor a menor)")
            print("  2. Por precio (de menor a mayor)")
            print("  Cualquier otra tecla para volver al men√∫ principal.")
            
            sub_opcion = input("  Elija una opci√≥n de ordenamiento: ")
            catalogo_a_mostrar = copy.deepcopy(catalogo_productos)
            lista_ordenada = []

            if sub_opcion == '1':
                print("\n--- Listado de Productos (ordenado por calificaci√≥n) ---")
                lista_ordenada = quick_sort(catalogo_a_mostrar, key=lambda p: p.calificacion_promedio, reverse=True)
            elif sub_opcion == '2':
                print("\n--- Listado de Productos (ordenado por precio) ---")
                lista_ordenada = quick_sort(catalogo_a_mostrar, key=lambda p: p.precio, reverse=False)
            else:
                print("\nVolviendo al men√∫ principal...")
                continue

            for producto in lista_ordenada:
                print(producto)

        elif opcion == '4':
            print("\n--- Men√∫ de B√∫squeda ---")
            print("1. Buscar por ID (exacto)")
            print("2. Buscar por nombre (contiene el texto)")
            print("Cualquier otra tecla para volver.")
            
            sub_opcion_busqueda = input("  Elija un m√©todo de b√∫squeda: ")

            if sub_opcion_busqueda == '1':
                try:
                    id_a_buscar = int(input("  Ingrese el ID del producto a buscar: "))
                    # Usamos el cat√°logo pre-ordenado por ID para la b√∫squeda binaria
                    resultado = busqueda_binaria(catalogo_ordenado_id, id_a_buscar)
                    print("\n--- Resultado de la B√∫squeda ---")
                    if resultado:
                        print(f"‚úÖ Producto encontrado: {resultado}")
                    else:
                        print(f"‚ùå No se encontr√≥ ning√∫n producto con el ID {id_a_buscar}.")
                except ValueError:
                    print("‚ùå Error: Por favor, ingrese un n√∫mero de ID v√°lido.")

            elif sub_opcion_busqueda == '2':
                texto_a_buscar = input("  Ingrese el nombre o parte del nombre a buscar: ")
                # Usamos el cat√°logo original para la b√∫squeda lineal
                resultados = busqueda_lineal_por_nombre(catalogo_productos, texto_a_buscar)
                print("\n--- Resultado de la B√∫squeda ---")
                if resultados:
                    print(f"‚úÖ Se encontraron {len(resultados)} productos:")
                    for producto in resultados:
                        print(producto)
                else:
                    print(f"‚ùå No se encontr√≥ ning√∫n producto que contenga '{texto_a_buscar}'.")
            
            else:
                print("\nVolviendo al men√∫ principal...")
         
        elif opcion == '0':
            print("\nSaliendo del programa. ¬°Hasta luego! üëã")
            break
        
        else:
            print("\n‚ö†Ô∏è  Opci√≥n no v√°lida. Por favor, elija una opci√≥n del men√∫.")

if __name__ == "__main__":
    ejecutar_simulacion_interactiva()